##The derivatives of Am are so large it requires its own file to contain them
##For efficiency the derivatives must be broken up by applying the chain rule
## Am->quotient->numerator/denominator

import math

def numerator(xn,yn,Ld,Lm, Ad,g,nx,ny, N, param_derivs = False):
    #print Ld,Lm,Ad,g,nx,ny,N
    if param_derivs == False:
        if xn == 0 and yn == 0:
           # print "Ld[1][0]: ",Ld[1][0]," Ad[1][0], nx[0][0]",Ad[1][0], nx[0][0], "Ad[0][1]),ny[0][0]",Ad[0][1],ny[0][0], "g[0][0]",g[0][0]
            n = -(Ld[0][0]*N[1][0] + N[0][0]*Ld[1][0] + Ad[1][0])*nx[0][0] - (Ld[0][0]*N[0][1] + N[0][0]*Ld[0][1] + Ad[0][1])*ny[0][0] + g[0][0]
        elif xn == 0 and yn == 1:
            n = -(Ld[0][0]*N[1][0] + N[0][0]*Ld[1][0] + Ad[1][0])*nx[0][1] - (Ld[0][0]*N[0][1] + N[0][0]*Ld[0][1] + Ad[0][1])*ny[0][1] - (Ld[0][0]*N[0][2] + N[0][0]*Ld[0][2] + 2*Ld[0][1]*N[0][1] + Ad[0][2])*ny[0][0] - (Ld[0][0]*N[1][1] + N[0][0]*Ld[1][1] + Ld[1][0]*N[0][1] + Ld[0][1]*N[1][0] + Ad[1][1])*nx[0][0] + g[0][1]
        elif xn == 0 and yn == 2:
            n = -(Ld[0][0]*N[1][0] + N[0][0]*Ld[1][0] + Ad[1][0])*nx[0][2] - (Ld[0][0]*N[0][1] + N[0][0]*Ld[0][1] + Ad[0][1])*ny[0][2] - 2*(Ld[0][0]*N[0][2] + N[0][0]*Ld[0][2] + 2*Ld[0][1]*N[0][1] + Ad[0][2])*ny[0][1] - 2*(Ld[0][0]*N[1][1] + N[0][0]*Ld[1][1] + Ld[1][0]*N[0][1] + Ld[0][1]*N[1][0] + Ad[1][1])*nx[0][1] - (Ld[0][0]*N[0][3] + N[0][0]*Ld[0][3] + 3*Ld[0][1]*N[0][2] + 3*N[0][1]*Ld[0][2] + Ad[0][3])*ny[0][0] - (Ld[0][0]*N[1][2] + N[0][0]*Ld[1][2] + Ld[1][0]*N[0][2] + 2*Ld[0][1]*N[1][1] + N[1][0]*Ld[0][2] + 2*N[0][1]*Ld[1][1] + Ad[1][2])*nx[0][0] + g[0][2]
        elif xn == 0 and yn == 3:
            n = -(Ld[0][0]*N[1][0] + N[0][0]*Ld[1][0] + Ad[1][0])*nx[0][3] - (Ld[0][0]*N[0][1] + N[0][0]*Ld[0][1] + Ad[0][1])*ny[0][3] - 3*(Ld[0][0]*N[0][2] + N[0][0]*Ld[0][2] + 2*Ld[0][1]*N[0][1] + Ad[0][2])*ny[0][2] - 3*(Ld[0][0]*N[1][1] + N[0][0]*Ld[1][1] + Ld[1][0]*N[0][1] + Ld[0][1]*N[1][0] + Ad[1][1])*nx[0][2] - 3*(Ld[0][0]*N[0][3] + N[0][0]*Ld[0][3] + 3*Ld[0][1]*N[0][2] + 3*N[0][1]*Ld[0][2] + Ad[0][3])*ny[0][1] - (Ld[0][0]*N[0][4] + N[0][0]*Ld[0][4] + 4*Ld[0][1]*N[0][3] + 4*N[0][1]*Ld[0][3] + 6*Ld[0][2]*N[0][2] + Ad[0][4])*ny[0][0] - 3*(Ld[0][0]*N[1][2] + N[0][0]*Ld[1][2] + Ld[1][0]*N[0][2] + 2*Ld[0][1]*N[1][1] + N[1][0]*Ld[0][2] + 2*N[0][1]*Ld[1][1] + Ad[1][2])*nx[0][1] - (Ld[0][0]*N[1][3] + N[0][0]*Ld[1][3] + Ld[1][0]*N[0][3] + 3*Ld[0][1]*N[1][2] + N[1][0]*Ld[0][3] + 3*N[0][1]*Ld[1][2] + 3*Ld[1][1]*N[0][2] + 3*Ld[0][2]*N[1][1] + Ad[1][3])*nx[0][0] + g[0][3]
        elif xn == 1 and yn == 0:
            n = -(Ld[0][0]*N[1][0] + N[0][0]*Ld[1][0] + Ad[1][0])*nx[1][0] - (Ld[0][0]*N[0][1] + N[0][0]*Ld[0][1] + Ad[0][1])*ny[1][0] - (Ld[0][0]*N[2][0] + N[0][0]*Ld[2][0] + 2*Ld[1][0]*N[1][0] + Ad[2][0])*nx[0][0] - (Ld[0][0]*N[1][1] + N[0][0]*Ld[1][1] + Ld[1][0]*N[0][1] + Ld[0][1]*N[1][0] + Ad[1][1])*ny[0][0] + g[1][0]
        elif xn == 1 and yn == 1:
            n = -(Ld[0][0]*N[1][0] + N[0][0]*Ld[1][0] + Ad[1][0])*nx[1][1] - (Ld[0][0]*N[0][1] + N[0][0]*Ld[0][1] + Ad[0][1])*ny[1][1] - (Ld[0][0]*N[2][0] + N[0][0]*Ld[2][0] + 2*Ld[1][0]*N[1][0] + Ad[2][0])*nx[0][1] - (Ld[0][0]*N[0][2] + N[0][0]*Ld[0][2] + 2*Ld[0][1]*N[0][1] + Ad[0][2])*ny[1][0] - (Ld[0][0]*N[1][1] + N[0][0]*Ld[1][1] + Ld[1][0]*N[0][1] + Ld[0][1]*N[1][0] + Ad[1][1])*nx[1][0] - (Ld[0][0]*N[1][1] + N[0][0]*Ld[1][1] + Ld[1][0]*N[0][1] + Ld[0][1]*N[1][0] + Ad[1][1])*ny[0][1] - (Ld[0][0]*N[1][2] + N[0][0]*Ld[1][2] + Ld[1][0]*N[0][2] + 2*Ld[0][1]*N[1][1] + N[1][0]*Ld[0][2] + 2*N[0][1]*Ld[1][1] + Ad[1][2])*ny[0][0] - (Ld[0][0]*N[2][1] + N[0][0]*Ld[2][1] + Ld[1][0]*N[1][1] + Ld[1][0]*N[1][1] + Ld[0][1]*N[2][0] + N[1][0]*Ld[1][1] + N[1][0]*Ld[1][1] + N[0][1]*Ld[2][0] + Ad[2][1])*nx[0][0] + g[1][1]
        elif xn == 1 and yn == 2:
            n = -(Ld[0][0]*N[1][0] + N[0][0]*Ld[1][0] + Ad[1][0])*nx[1][2] - (Ld[0][0]*N[0][1] + N[0][0]*Ld[0][1] + Ad[0][1])*ny[1][2] - (Ld[0][0]*N[2][0] + N[0][0]*Ld[2][0] + 2*Ld[1][0]*N[1][0] + Ad[2][0])*nx[0][2] - 2*(Ld[0][0]*N[0][2] + N[0][0]*Ld[0][2] + 2*Ld[0][1]*N[0][1] + Ad[0][2])*ny[1][1] - 2*(Ld[0][0]*N[1][1] + N[0][0]*Ld[1][1] + Ld[1][0]*N[0][1] + Ld[0][1]*N[1][0] + Ad[1][1])*nx[1][1] - (Ld[0][0]*N[1][1] + N[0][0]*Ld[1][1] + Ld[1][0]*N[0][1] + Ld[0][1]*N[1][0] + Ad[1][1])*ny[0][2] - (Ld[0][0]*N[0][3] + N[0][0]*Ld[0][3] + 3*Ld[0][1]*N[0][2] + 3*N[0][1]*Ld[0][2] + Ad[0][3])*ny[1][0] - (Ld[0][0]*N[1][2] + N[0][0]*Ld[1][2] + Ld[1][0]*N[0][2] + 2*Ld[0][1]*N[1][1] + N[1][0]*Ld[0][2] + 2*N[0][1]*Ld[1][1] + Ad[1][2])*nx[1][0] - 2*(Ld[0][0]*N[1][2] + N[0][0]*Ld[1][2] + Ld[1][0]*N[0][2] + 2*Ld[0][1]*N[1][1] + N[1][0]*Ld[0][2] + 2*N[0][1]*Ld[1][1] + Ad[1][2])*ny[0][1] - 2*(Ld[0][0]*N[2][1] + N[0][0]*Ld[2][1] + Ld[1][0]*N[1][1] + Ld[1][0]*N[1][1] + Ld[0][1]*N[2][0] + N[1][0]*Ld[1][1] + N[1][0]*Ld[1][1] + N[0][1]*Ld[2][0] + Ad[2][1])*nx[0][1] - (Ld[0][0]*N[1][3] + N[0][0]*Ld[1][3] + Ld[1][0]*N[0][3] + 3*Ld[0][1]*N[1][2] + N[1][0]*Ld[0][3] + 3*N[0][1]*Ld[1][2] + 3*Ld[1][1]*N[0][2] + 3*Ld[0][2]*N[1][1] + Ad[1][3])*ny[0][0] - (Ld[0][0]*N[2][2] + N[0][0]*Ld[2][2] + Ld[1][0]*N[1][2] + Ld[1][0]*N[1][2] + 2*Ld[0][1]*N[2][1] + N[1][0]*Ld[1][2] + N[1][0]*Ld[1][2] + 2*N[0][1]*Ld[2][1] + Ld[2][0]*N[0][2] + 2*Ld[1][1]*N[1][1] + 2*Ld[1][1]*N[1][1] + Ld[0][2]*N[2][0] + Ad[2][2])*nx[0][0] + g[1][2]
        elif xn == 2 and yn == 0:
            n = -(Ld[0][0]*N[1][0] + N[0][0]*Ld[1][0] + Ad[1][0])*nx[2][0] - (Ld[0][0]*N[0][1] + N[0][0]*Ld[0][1] + Ad[0][1])*ny[2][0] - 2*(Ld[0][0]*N[2][0] + N[0][0]*Ld[2][0] + 2*Ld[1][0]*N[1][0] + Ad[2][0])*nx[1][0] - 2*(Ld[0][0]*N[1][1] + N[0][0]*Ld[1][1] + Ld[1][0]*N[0][1] + Ld[0][1]*N[1][0] + Ad[1][1])*ny[1][0] - (Ld[0][0]*N[3][0] + N[0][0]*Ld[3][0] + 3*Ld[1][0]*N[2][0] + 3*N[1][0]*Ld[2][0] + Ad[3][0])*nx[0][0] - (Ld[0][0]*N[2][1] + N[0][0]*Ld[2][1] + 2*Ld[1][0]*N[1][1] + Ld[0][1]*N[2][0] + 2*N[1][0]*Ld[1][1] + N[0][1]*Ld[2][0] + Ad[2][1])*ny[0][0] + g[2][0]
        elif xn == 2 and yn == 1:
            n = -(Ld[0][0]*N[1][0] + N[0][0]*Ld[1][0] + Ad[1][0])*nx[2][1] - (Ld[0][0]*N[0][1] + N[0][0]*Ld[0][1] + Ad[0][1])*ny[2][1] - 2*(Ld[0][0]*N[2][0] + N[0][0]*Ld[2][0] + 2*Ld[1][0]*N[1][0] + Ad[2][0])*nx[1][1] - (Ld[0][0]*N[0][2] + N[0][0]*Ld[0][2] + 2*Ld[0][1]*N[0][1] + Ad[0][2])*ny[2][0] - (Ld[0][0]*N[1][1] + N[0][0]*Ld[1][1] + Ld[1][0]*N[0][1] + Ld[0][1]*N[1][0] + Ad[1][1])*nx[2][0] - 2*(Ld[0][0]*N[1][1] + N[0][0]*Ld[1][1] + Ld[1][0]*N[0][1] + Ld[0][1]*N[1][0] + Ad[1][1])*ny[1][1] - (Ld[0][0]*N[3][0] + N[0][0]*Ld[3][0] + 3*Ld[1][0]*N[2][0] + 3*N[1][0]*Ld[2][0] + Ad[3][0])*nx[0][1] - (Ld[0][0]*N[2][1] + N[0][0]*Ld[2][1] + 2*Ld[1][0]*N[1][1] + Ld[0][1]*N[2][0] + 2*N[1][0]*Ld[1][1] + N[0][1]*Ld[2][0] + Ad[2][1])*ny[0][1] - 2*(Ld[0][0]*N[1][2] + N[0][0]*Ld[1][2] + Ld[1][0]*N[0][2] + 2*Ld[0][1]*N[1][1] + N[1][0]*Ld[0][2] + 2*N[0][1]*Ld[1][1] + Ad[1][2])*ny[1][0] - 2*(Ld[0][0]*N[2][1] + N[0][0]*Ld[2][1] + Ld[1][0]*N[1][1] + Ld[1][0]*N[1][1] + Ld[0][1]*N[2][0] + N[1][0]*Ld[1][1] + N[1][0]*Ld[1][1] + N[0][1]*Ld[2][0] + Ad[2][1])*nx[1][0] - (Ld[0][0]*N[2][2] + N[0][0]*Ld[2][2] + 2*Ld[1][0]*N[1][2] + 2*Ld[0][1]*N[2][1] + 2*N[1][0]*Ld[1][2] + 2*N[0][1]*Ld[2][1] + Ld[2][0]*N[0][2] + 4*Ld[1][1]*N[1][1] + Ld[0][2]*N[2][0] + Ad[2][2])*ny[0][0] - (Ld[0][0]*N[3][1] + N[0][0]*Ld[3][1] + 2*Ld[1][0]*N[2][1] + Ld[1][0]*N[2][1] + Ld[0][1]*N[3][0] + 2*N[1][0]*Ld[2][1] + N[1][0]*Ld[2][1] + N[0][1]*Ld[3][0] + Ld[2][0]*N[1][1] + 2*Ld[2][0]*N[1][1] + Ld[1][1]*N[2][0] + 2*Ld[1][1]*N[2][0] + Ad[3][1])*nx[0][0] + g[2][1]
        elif xn == 3 and yn == 0:
            n = -(Ld[0][0]*N[1][0] + N[0][0]*Ld[1][0] + Ad[1][0])*nx[3][0] - (Ld[0][0]*N[0][1] + N[0][0]*Ld[0][1] + Ad[0][1])*ny[3][0] - 3*(Ld[0][0]*N[2][0] + N[0][0]*Ld[2][0] + 2*Ld[1][0]*N[1][0] + Ad[2][0])*nx[2][0] - 3*(Ld[0][0]*N[1][1] + N[0][0]*Ld[1][1] + Ld[1][0]*N[0][1] + Ld[0][1]*N[1][0] + Ad[1][1])*ny[2][0] - 3*(Ld[0][0]*N[3][0] + N[0][0]*Ld[3][0] + 3*Ld[1][0]*N[2][0] + 3*N[1][0]*Ld[2][0] + Ad[3][0])*nx[1][0] - (Ld[0][0]*N[4][0] + N[0][0]*Ld[4][0] + 4*Ld[1][0]*N[3][0] + 4*N[1][0]*Ld[3][0] + 6*Ld[2][0]*N[2][0] + Ad[4][0])*nx[0][0] - 3*(Ld[0][0]*N[2][1] + N[0][0]*Ld[2][1] + 2*Ld[1][0]*N[1][1] + Ld[0][1]*N[2][0] + 2*N[1][0]*Ld[1][1] + N[0][1]*Ld[2][0] + Ad[2][1])*ny[1][0] - (Ld[0][0]*N[3][1] + N[0][0]*Ld[3][1] + 3*Ld[1][0]*N[2][1] + Ld[0][1]*N[3][0] + 3*N[1][0]*Ld[2][1] + N[0][1]*Ld[3][0] + 3*Ld[2][0]*N[1][1] + 3*Ld[1][1]*N[2][0] + Ad[3][1])*ny[0][0] + g[3][0]
        return n
    else:
        if xn == 0 and yn == 0:
            n = -(Ld[0][0]*N[1][0] + Ld[1][0]*N[0][0])*nx[0][0] - (Ld[0][0]*N[0][1] + Ld[0][1]*N[0][0])*ny[0][0]
        elif xn == 0 and yn == 1:
            n = -(Ld[0][0]*N[1][0] + Ld[1][0]*N[0][0])*nx[0][1] - (Ld[0][0]*N[0][1] + Ld[0][1]*N[0][0])*ny[0][1] - (Ld[0][0]*N[0][2] + 2*Ld[0][1]*N[0][1] + N[0][0]*Ld[0][2])*ny[0][0] - (Ld[0][0]*N[1][1] + Ld[1][0]*N[0][1] + Ld[0][1]*N[1][0] + N[0][0]*Ld[1][1])*nx[0][0]
        elif xn == 0 and yn == 2:
            n = -(Ld[0][0]*N[1][0] + Ld[1][0]*N[0][0])*nx[0][2] - (Ld[0][0]*N[0][1] + Ld[0][1]*N[0][0])*ny[0][2] - 2*(Ld[0][0]*N[0][2] + 2*Ld[0][1]*N[0][1] + N[0][0]*Ld[0][2])*ny[0][1] - 2*(Ld[0][0]*N[1][1] + Ld[1][0]*N[0][1] + Ld[0][1]*N[1][0] + N[0][0]*Ld[1][1])*nx[0][1] - (Ld[0][0]*N[0][3] + 3*Ld[0][1]*N[0][2] + N[0][0]*Ld[0][3] + 3*Ld[0][2]*N[0][1])*ny[0][0] - (Ld[0][0]*N[1][2] + Ld[1][0]*N[0][2] + 2*Ld[0][1]*N[1][1] + N[0][0]*Ld[1][2] + 2*Ld[1][1]*N[0][1] + Ld[0][2]*N[1][0])*nx[0][0]
        elif xn == 0 and yn == 3:
            n = -(Ld[0][0]*N[1][0] + Ld[1][0]*N[0][0])*nx[0][3] - (Ld[0][0]*N[0][1] + Ld[0][1]*N[0][0])*ny[0][3] - 3*(Ld[0][0]*N[0][2] + 2*Ld[0][1]*N[0][1] + N[0][0]*Ld[0][2])*ny[0][2] - 3*(Ld[0][0]*N[1][1] + Ld[1][0]*N[0][1] + Ld[0][1]*N[1][0] + N[0][0]*Ld[1][1])*nx[0][2] - 3*(Ld[0][0]*N[0][3] + 3*Ld[0][1]*N[0][2] + N[0][0]*Ld[0][3] + 3*Ld[0][2]*N[0][1])*ny[0][1] - (Ld[0][0]*N[0][4] + 4*Ld[0][1]*N[0][3] + N[0][0]*Ld[0][4] + 6*Ld[0][2]*N[0][2] + 4*N[0][1]*Ld[0][3])*ny[0][0] - 3*(Ld[0][0]*N[1][2] + Ld[1][0]*N[0][2] + 2*Ld[0][1]*N[1][1] + N[0][0]*Ld[1][2] + 2*Ld[1][1]*N[0][1] + Ld[0][2]*N[1][0])*nx[0][1] - (Ld[0][0]*N[1][3] + Ld[1][0]*N[0][3] + 3*Ld[0][1]*N[1][2] + N[0][0]*Ld[1][3] + 3*Ld[1][1]*N[0][2] + 3*Ld[0][2]*N[1][1] + N[1][0]*Ld[0][3] + 3*N[0][1]*Ld[1][2])*nx[0][0]
        elif xn == 1 and yn == 0:
            n = -(Ld[0][0]*N[1][0] + Ld[1][0]*N[0][0])*nx[1][0] - (Ld[0][0]*N[0][1] + Ld[0][1]*N[0][0])*ny[1][0] - (Ld[0][0]*N[2][0] + 2*Ld[1][0]*N[1][0] + N[0][0]*Ld[2][0])*nx[0][0] - (Ld[0][0]*N[1][1] + Ld[1][0]*N[0][1] + Ld[0][1]*N[1][0] + N[0][0]*Ld[1][1])*ny[0][0]
        elif xn == 1 and yn == 1:
            n = -(Ld[0][0]*N[1][0] + Ld[1][0]*N[0][0])*nx[1][1] - (Ld[0][0]*N[0][1] + Ld[0][1]*N[0][0])*ny[1][1] - (Ld[0][0]*N[2][0] + 2*Ld[1][0]*N[1][0] + N[0][0]*Ld[2][0])*nx[0][1] - (Ld[0][0]*N[0][2] + 2*Ld[0][1]*N[0][1] + N[0][0]*Ld[0][2])*ny[1][0] - (Ld[0][0]*N[1][1] + Ld[1][0]*N[0][1] + Ld[0][1]*N[1][0] + N[0][0]*Ld[1][1])*nx[1][0] - (Ld[0][0]*N[1][1] + Ld[1][0]*N[0][1] + Ld[0][1]*N[1][0] + N[0][0]*Ld[1][1])*ny[0][1] - (Ld[0][0]*N[1][2] + Ld[1][0]*N[0][2] + 2*Ld[0][1]*N[1][1] + N[0][0]*Ld[1][2] + 2*Ld[1][1]*N[0][1] + Ld[0][2]*N[1][0])*ny[0][0] - (Ld[0][0]*N[2][1] + Ld[1][0]*N[1][1] + Ld[1][0]*N[1][1] + Ld[0][1]*N[2][0] + N[0][0]*Ld[2][1] + Ld[2][0]*N[0][1] + Ld[1][1]*N[1][0] + Ld[1][1]*N[1][0])*nx[0][0]
        elif xn == 1 and yn == 2:
            n = -(Ld[0][0]*N[1][0] + Ld[1][0]*N[0][0])*nx[1][2] - (Ld[0][0]*N[0][1] + Ld[0][1]*N[0][0])*ny[1][2] - (Ld[0][0]*N[2][0] + 2*Ld[1][0]*N[1][0] + N[0][0]*Ld[2][0])*nx[0][2] - 2*(Ld[0][0]*N[0][2] + 2*Ld[0][1]*N[0][1] + N[0][0]*Ld[0][2])*ny[1][1] - 2*(Ld[0][0]*N[1][1] + Ld[1][0]*N[0][1] + Ld[0][1]*N[1][0] + N[0][0]*Ld[1][1])*nx[1][1] - (Ld[0][0]*N[1][1] + Ld[1][0]*N[0][1] + Ld[0][1]*N[1][0] + N[0][0]*Ld[1][1])*ny[0][2] - (Ld[0][0]*N[0][3] + 3*Ld[0][1]*N[0][2] + N[0][0]*Ld[0][3] + 3*Ld[0][2]*N[0][1])*ny[1][0] - (Ld[0][0]*N[1][2] + Ld[1][0]*N[0][2] + 2*Ld[0][1]*N[1][1] + N[0][0]*Ld[1][2] + 2*Ld[1][1]*N[0][1] + Ld[0][2]*N[1][0])*nx[1][0] - 2*(Ld[0][0]*N[1][2] + Ld[1][0]*N[0][2] + 2*Ld[0][1]*N[1][1] + N[0][0]*Ld[1][2] + 2*Ld[1][1]*N[0][1] + Ld[0][2]*N[1][0])*ny[0][1] - 2*(Ld[0][0]*N[2][1] + Ld[1][0]*N[1][1] + Ld[1][0]*N[1][1] + Ld[0][1]*N[2][0] + N[0][0]*Ld[2][1] + Ld[2][0]*N[0][1] + Ld[1][1]*N[1][0] + Ld[1][1]*N[1][0])*nx[0][1] - (Ld[0][0]*N[1][3] + Ld[1][0]*N[0][3] + 3*Ld[0][1]*N[1][2] + N[0][0]*Ld[1][3] + 3*Ld[1][1]*N[0][2] + 3*Ld[0][2]*N[1][1] + N[1][0]*Ld[0][3] + 3*N[0][1]*Ld[1][2])*ny[0][0] - (Ld[0][0]*N[2][2] + Ld[1][0]*N[1][2] + Ld[1][0]*N[1][2] + 2*Ld[0][1]*N[2][1] + N[0][0]*Ld[2][2] + Ld[2][0]*N[0][2] + 2*Ld[1][1]*N[1][1] + 2*Ld[1][1]*N[1][1] + Ld[0][2]*N[2][0] + N[1][0]*Ld[1][2] + N[1][0]*Ld[1][2] + 2*N[0][1]*Ld[2][1])*nx[0][0]
        elif xn == 2 and yn == 0:
            n = -(Ld[0][0]*N[1][0] + Ld[1][0]*N[0][0])*nx[2][0] - (Ld[0][0]*N[0][1] + Ld[0][1]*N[0][0])*ny[2][0] - 2*(Ld[0][0]*N[2][0] + 2*Ld[1][0]*N[1][0] + N[0][0]*Ld[2][0])*nx[1][0] - 2*(Ld[0][0]*N[1][1] + Ld[1][0]*N[0][1] + Ld[0][1]*N[1][0] + N[0][0]*Ld[1][1])*ny[1][0] - (Ld[0][0]*N[3][0] + 3*Ld[1][0]*N[2][0] + N[0][0]*Ld[3][0] + 3*Ld[2][0]*N[1][0])*nx[0][0] - (Ld[0][0]*N[2][1] + 2*Ld[1][0]*N[1][1] + Ld[0][1]*N[2][0] + N[0][0]*Ld[2][1] + Ld[2][0]*N[0][1] + 2*Ld[1][1]*N[1][0])*ny[0][0]
        elif xn == 2 and yn == 1:
            n = -(Ld[0][0]*N[1][0] + Ld[1][0]*N[0][0])*nx[2][1] - (Ld[0][0]*N[0][1] + Ld[0][1]*N[0][0])*ny[2][1] - 2*(Ld[0][0]*N[2][0] + 2*Ld[1][0]*N[1][0] + N[0][0]*Ld[2][0])*nx[1][1] - (Ld[0][0]*N[0][2] + 2*Ld[0][1]*N[0][1] + N[0][0]*Ld[0][2])*ny[2][0] - (Ld[0][0]*N[1][1] + Ld[1][0]*N[0][1] + Ld[0][1]*N[1][0] + N[0][0]*Ld[1][1])*nx[2][0] - 2*(Ld[0][0]*N[1][1] + Ld[1][0]*N[0][1] + Ld[0][1]*N[1][0] + N[0][0]*Ld[1][1])*ny[1][1] - (Ld[0][0]*N[3][0] + 3*Ld[1][0]*N[2][0] + N[0][0]*Ld[3][0] + 3*Ld[2][0]*N[1][0])*nx[0][1] - (Ld[0][0]*N[2][1] + 2*Ld[1][0]*N[1][1] + Ld[0][1]*N[2][0] + N[0][0]*Ld[2][1] + Ld[2][0]*N[0][1] + 2*Ld[1][1]*N[1][0])*ny[0][1] - 2*(Ld[0][0]*N[1][2] + Ld[1][0]*N[0][2] + 2*Ld[0][1]*N[1][1] + N[0][0]*Ld[1][2] + 2*Ld[1][1]*N[0][1] + Ld[0][2]*N[1][0])*ny[1][0] - 2*(Ld[0][0]*N[2][1] + Ld[1][0]*N[1][1] + Ld[1][0]*N[1][1] + Ld[0][1]*N[2][0] + N[0][0]*Ld[2][1] + Ld[2][0]*N[0][1] + Ld[1][1]*N[1][0] + Ld[1][1]*N[1][0])*nx[1][0] - (Ld[0][0]*N[2][2] + 2*Ld[1][0]*N[1][2] + 2*Ld[0][1]*N[2][1] + N[0][0]*Ld[2][2] + Ld[2][0]*N[0][2] + 4*Ld[1][1]*N[1][1] + Ld[0][2]*N[2][0] + 2*N[1][0]*Ld[1][2] + 2*N[0][1]*Ld[2][1])*ny[0][0] - (Ld[0][0]*N[3][1] + 2*Ld[1][0]*N[2][1] + Ld[1][0]*N[2][1] + Ld[0][1]*N[3][0] + N[0][0]*Ld[3][1] + Ld[2][0]*N[1][1] + 2*Ld[2][0]*N[1][1] + Ld[1][1]*N[2][0] + 2*Ld[1][1]*N[2][0] + 2*N[1][0]*Ld[2][1] + N[1][0]*Ld[2][1] + N[0][1]*Ld[3][0])*nx[0][0]
        elif xn == 3 and yn == 0:
            n = -(Ld[0][0]*N[1][0] + Ld[1][0]*N[0][0])*nx[3][0] - (Ld[0][0]*N[0][1] + Ld[0][1]*N[0][0])*ny[3][0] - 3*(Ld[0][0]*N[2][0] + 2*Ld[1][0]*N[1][0] + N[0][0]*Ld[2][0])*nx[2][0] - 3*(Ld[0][0]*N[1][1] + Ld[1][0]*N[0][1] + Ld[0][1]*N[1][0] + N[0][0]*Ld[1][1])*ny[2][0] - 3*(Ld[0][0]*N[3][0] + 3*Ld[1][0]*N[2][0] + N[0][0]*Ld[3][0] + 3*Ld[2][0]*N[1][0])*nx[1][0] - (Ld[0][0]*N[4][0] + 4*Ld[1][0]*N[3][0] + N[0][0]*Ld[4][0] + 6*Ld[2][0]*N[2][0] + 4*N[1][0]*Ld[3][0])*nx[0][0] - 3*(Ld[0][0]*N[2][1] + 2*Ld[1][0]*N[1][1] + Ld[0][1]*N[2][0] + N[0][0]*Ld[2][1] + Ld[2][0]*N[0][1] + 2*Ld[1][1]*N[1][0])*ny[1][0] - (Ld[0][0]*N[3][1] + 3*Ld[1][0]*N[2][1] + Ld[0][1]*N[3][0] + N[0][0]*Ld[3][1] + 3*Ld[2][0]*N[1][1] + 3*Ld[1][1]*N[2][0] + 3*N[1][0]*Ld[2][1] + N[0][1]*Ld[3][0])*ny[0][0]
        return n

def donominator(xn,yn,Ld,Lm, Ad,g,nx,ny, N,K=0.1,a=0.1):
    if xn == 0 and yn == 0:
       # print "K*(1 - math.exp(-a*Lm[0][0])):",K*(1 - math.exp(-a*Lm[0][0]))," nx[0][0],Lm[1][0]: ",nx[0][0],Lm[1][0], "ny[0][0],Lm[0][1]", ny[0][0],Lm[0][1]
        d = K*(1 - math.exp(-a*Lm[0][0])) + (nx[0][0]*Lm[1][0] + ny[0][0]*Lm[0][1])*Ld[0][0]
    elif xn == 0 and yn == 1:
        d = K*a*math.exp(-a*Lm[0][0])*Lm[0][1] + (nx[0][0]*Lm[1][0] + ny[0][0]*Lm[0][1])*Ld[0][1] + (nx[0][0]*Lm[1][1] + ny[0][0]*Lm[0][2] + Lm[1][0]*nx[0][1] + Lm[0][1]*ny[0][1])*Ld[0][0]
    elif xn == 0 and yn == 2:
        d = -K*a**2*math.exp(-a*Lm[0][0])*Lm[0][1]**2 + K*a*math.exp(-a*Lm[0][0])*Lm[0][2] + (nx[0][0]*Lm[1][0] + ny[0][0]*Lm[0][1])*Ld[0][2] + 2*(nx[0][0]*Lm[1][1] + ny[0][0]*Lm[0][2] + Lm[1][0]*nx[0][1] + Lm[0][1]*ny[0][1])*Ld[0][1] + (nx[0][0]*Lm[1][2] + ny[0][0]*Lm[0][3] + Lm[1][0]*nx[0][2] + Lm[0][1]*ny[0][2] + 2*nx[0][1]*Lm[1][1] + 2*ny[0][1]*Lm[0][2])*Ld[0][0]
    elif xn == 0 and yn == 3:
        d = K*a**3*math.exp(-a*Lm[0][0])*Lm[0][1]**3 - 3*K*a**2*math.exp(-a*Lm[0][0])*Lm[0][1]*Lm[0][2] + K*a*math.exp(-a*Lm[0][0])*Lm[0][3] + (nx[0][0]*Lm[1][0] + ny[0][0]*Lm[0][1])*Ld[0][3] + 3*(nx[0][0]*Lm[1][1] + ny[0][0]*Lm[0][2] + Lm[1][0]*nx[0][1] + Lm[0][1]*ny[0][1])*Ld[0][2] + 3*(nx[0][0]*Lm[1][2] + ny[0][0]*Lm[0][3] + Lm[1][0]*nx[0][2] + Lm[0][1]*ny[0][2] + 2*nx[0][1]*Lm[1][1] + 2*ny[0][1]*Lm[0][2])*Ld[0][1] + (nx[0][0]*Lm[1][3] + ny[0][0]*Lm[0][4] + Lm[1][0]*nx[0][3] + Lm[0][1]*ny[0][3] + 3*nx[0][1]*Lm[1][2] + 3*ny[0][1]*Lm[0][3] + 3*Lm[1][1]*nx[0][2] + 3*Lm[0][2]*ny[0][2])*Ld[0][0]
    elif xn == 1 and yn == 0:
        d = K*a*math.exp(-a*Lm[0][0])*Lm[1][0] + (nx[0][0]*Lm[1][0] + ny[0][0]*Lm[0][1])*Ld[1][0] + (nx[0][0]*Lm[2][0] + ny[0][0]*Lm[1][1] + Lm[1][0]*nx[1][0] + Lm[0][1]*ny[1][0])*Ld[0][0]
    elif xn == 1 and yn == 1:
        d = -K*a**2*math.exp(-a*Lm[0][0])*Lm[1][0]*Lm[0][1] + K*a*math.exp(-a*Lm[0][0])*Lm[1][1] + (nx[0][0]*Lm[1][0] + ny[0][0]*Lm[0][1])*Ld[1][1] + (nx[0][0]*Lm[2][0] + ny[0][0]*Lm[1][1] + Lm[1][0]*nx[1][0] + Lm[0][1]*ny[1][0])*Ld[0][1] + (nx[0][0]*Lm[1][1] + ny[0][0]*Lm[0][2] + Lm[1][0]*nx[0][1] + Lm[0][1]*ny[0][1])*Ld[1][0] + (nx[0][0]*Lm[2][1] + ny[0][0]*Lm[1][2] + Lm[1][0]*nx[1][1] + Lm[0][1]*ny[1][1] + nx[1][0]*Lm[1][1] + nx[0][1]*Lm[2][0] + ny[1][0]*Lm[0][2] + ny[0][1]*Lm[1][1])*Ld[0][0]
    elif xn == 1 and yn == 2:
        d = K*a**3*math.exp(-a*Lm[0][0])*Lm[1][0]*Lm[0][1]**2 - K*a**2*math.exp(-a*Lm[0][0])*Lm[1][0]*Lm[0][2] - 2*K*a**2*math.exp(-a*Lm[0][0])*Lm[0][1]*Lm[1][1] + K*a*math.exp(-a*Lm[0][0])*Lm[1][2] + (nx[0][0]*Lm[1][0] + ny[0][0]*Lm[0][1])*Ld[1][2] + (nx[0][0]*Lm[2][0] + ny[0][0]*Lm[1][1] + Lm[1][0]*nx[1][0] + Lm[0][1]*ny[1][0])*Ld[0][2] + 2*(nx[0][0]*Lm[1][1] + ny[0][0]*Lm[0][2] + Lm[1][0]*nx[0][1] + Lm[0][1]*ny[0][1])*Ld[1][1] + (nx[0][0]*Lm[1][2] + ny[0][0]*Lm[0][3] + Lm[1][0]*nx[0][2] + Lm[0][1]*ny[0][2] + 2*nx[0][1]*Lm[1][1] + 2*ny[0][1]*Lm[0][2])*Ld[1][0] + 2*(nx[0][0]*Lm[2][1] + ny[0][0]*Lm[1][2] + Lm[1][0]*nx[1][1] + Lm[0][1]*ny[1][1] + nx[1][0]*Lm[1][1] + nx[0][1]*Lm[2][0] + ny[1][0]*Lm[0][2] + ny[0][1]*Lm[1][1])*Ld[0][1] + (nx[0][0]*Lm[2][2] + ny[0][0]*Lm[1][3] + Lm[1][0]*nx[1][2] + Lm[0][1]*ny[1][2] + nx[1][0]*Lm[1][2] + 2*nx[0][1]*Lm[2][1] + ny[1][0]*Lm[0][3] + 2*ny[0][1]*Lm[1][2] + Lm[2][0]*nx[0][2] + 2*Lm[1][1]*nx[1][1] + Lm[1][1]*ny[0][2] + 2*Lm[0][2]*ny[1][1])*Ld[0][0]
    elif xn == 2 and yn == 0:
        d = -K*a**2*math.exp(-a*Lm[0][0])*Lm[1][0]**2 + K*a*math.exp(-a*Lm[0][0])*Lm[2][0] + (nx[0][0]*Lm[1][0] + ny[0][0]*Lm[0][1])*Ld[2][0] + 2*(nx[0][0]*Lm[2][0] + ny[0][0]*Lm[1][1] + Lm[1][0]*nx[1][0] + Lm[0][1]*ny[1][0])*Ld[1][0] + (nx[0][0]*Lm[3][0] + ny[0][0]*Lm[2][1] + Lm[1][0]*nx[2][0] + Lm[0][1]*ny[2][0] + 2*nx[1][0]*Lm[2][0] + 2*ny[1][0]*Lm[1][1])*Ld[0][0]
    elif xn == 2 and yn == 1:
       d =  K*a**3*math.exp(-a*Lm[0][0])*Lm[1][0]**2*Lm[0][1] - 2*K*a**2*math.exp(-a*Lm[0][0])*Lm[1][0]*Lm[1][1] - K*a**2*math.exp(-a*Lm[0][0])*Lm[0][1]*Lm[2][0] + K*a*math.exp(-a*Lm[0][0])*Lm[2][1] + (nx[0][0]*Lm[1][0] + ny[0][0]*Lm[0][1])*Ld[2][1] + 2*(nx[0][0]*Lm[2][0] + ny[0][0]*Lm[1][1] + Lm[1][0]*nx[1][0] + Lm[0][1]*ny[1][0])*Ld[1][1] + (nx[0][0]*Lm[1][1] + ny[0][0]*Lm[0][2] + Lm[1][0]*nx[0][1] + Lm[0][1]*ny[0][1])*Ld[2][0] + (nx[0][0]*Lm[3][0] + ny[0][0]*Lm[2][1] + Lm[1][0]*nx[2][0] + Lm[0][1]*ny[2][0] + 2*nx[1][0]*Lm[2][0] + 2*ny[1][0]*Lm[1][1])*Ld[0][1] + 2*(nx[0][0]*Lm[2][1] + ny[0][0]*Lm[1][2] + Lm[1][0]*nx[1][1] + Lm[0][1]*ny[1][1] + nx[1][0]*Lm[1][1] + nx[0][1]*Lm[2][0] + ny[1][0]*Lm[0][2] + ny[0][1]*Lm[1][1])*Ld[1][0] + (nx[0][0]*Lm[3][1] + ny[0][0]*Lm[2][2] + Lm[1][0]*nx[2][1] + Lm[0][1]*ny[2][1] + 2*nx[1][0]*Lm[2][1] + nx[0][1]*Lm[3][0] + 2*ny[1][0]*Lm[1][2] + ny[0][1]*Lm[2][1] + 2*Lm[2][0]*nx[1][1] + Lm[1][1]*nx[2][0] + 2*Lm[1][1]*ny[1][1] + Lm[0][2]*ny[2][0])*Ld[0][0]
    elif xn == 3 and yn == 0:
       d =  K*a**3*math.exp(-a*Lm[0][0])*Lm[1][0]**3 - 3*K*a**2*math.exp(-a*Lm[0][0])*Lm[1][0]*Lm[2][0] + K*a*math.exp(-a*Lm[0][0])*Lm[3][0] + (nx[0][0]*Lm[1][0] + ny[0][0]*Lm[0][1])*Ld[3][0] + 3*(nx[0][0]*Lm[2][0] + ny[0][0]*Lm[1][1] + Lm[1][0]*nx[1][0] + Lm[0][1]*ny[1][0])*Ld[2][0] + 3*(nx[0][0]*Lm[3][0] + ny[0][0]*Lm[2][1] + Lm[1][0]*nx[2][0] + Lm[0][1]*ny[2][0] + 2*nx[1][0]*Lm[2][0] + 2*ny[1][0]*Lm[1][1])*Ld[1][0] + (nx[0][0]*Lm[4][0] + ny[0][0]*Lm[3][1] + Lm[1][0]*nx[3][0] + Lm[0][1]*ny[3][0] + 3*nx[1][0]*Lm[3][0] + 3*ny[1][0]*Lm[2][1] + 3*Lm[2][0]*nx[2][0] + 3*Lm[1][1]*ny[2][0])*Ld[0][0]
    return d
def quotient(xn,yn,Ld,Lm, Ad,g,nx,ny, N, param_derive = False):
    don=[]
    if len(don)==0:
        k=3
        for i in range(4):
            j=0
            drow=[]
            while j <= k:
                if i<=xn and j<=yn:
                    drow+=[donominator(i,j,Ld,Lm, Ad,g,nx,ny, N)]
                j+=1
            don+=[drow]
            k-=1
        
    num=[]  
    k=3
    for i in range(4):
        j=0
        nrow=[]
        while j <= k:
            if i<=xn and j<=yn:
                nrow+=[numerator(i,j,Ld,Lm, Ad,g,nx,ny, N,param_derive)]
            j+=1
        num+=[nrow]
        k-=1
    if xn==0 and yn== 0:
       # print "num[0][0],don[0][0]",num[0][0],don[0][0]
        q=num[0][0]/don[0][0]
    elif xn== 0 and yn== 1:
        q=num[0][1]/don[0][0] - num[0][0]*don[0][1]/don[0][0]**2
    elif xn== 0and yn==  2:
        q=num[0][2]/don[0][0] - num[0][0]*don[0][2]/don[0][0]**2 - 2*don[0][1]*num[0][1]/don[0][0]**2 + 2*num[0][0]*don[0][1]**2/don[0][0]**3
    elif xn== 0and yn== 3:
        q=num[0][3]/don[0][0] - num[0][0]*don[0][3]/don[0][0]**2 - 3*don[0][1]*num[0][2]/don[0][0]**2 - 3*num[0][1]*don[0][2]/don[0][0]**2 + 6*num[0][0]*don[0][1]*don[0][2]/don[0][0]**3 + 6*don[0][1]**2*num[0][1]/don[0][0]**3 - 6*num[0][0]*don[0][1]**3/don[0][0]**4
    elif xn==1 and yn== 0:
        q=num[1][0]/don[0][0] - num[0][0]*don[1][0]/don[0][0]**2
    elif xn==1 and yn== 1:
        q=num[1][1]/don[0][0] - num[0][0]*don[1][1]/don[0][0]**2 - don[1][0]*num[0][1]/don[0][0]**2 - don[0][1]*num[1][0]/don[0][0]**2 + 2*num[0][0]*don[1][0]*don[0][1]/don[0][0]**3
    elif xn== 1 and yn== 2:
        q=num[1][2]/don[0][0] - num[0][0]*don[1][2]/don[0][0]**2 - don[1][0]*num[0][2]/don[0][0]**2 - 2*don[0][1]*num[1][1]/don[0][0]**2 - num[1][0]*don[0][2]/don[0][0]**2 - 2*num[0][1]*don[1][1]/don[0][0]**2 + 2*num[0][0]*don[1][0]*don[0][2]/don[0][0]**3 + 4*num[0][0]*don[0][1]*don[1][1]/don[0][0]**3 + 4*don[1][0]*don[0][1]*num[0][1]/don[0][0]**3 + 2*don[0][1]**2*num[1][0]/don[0][0]**3 - 6*num[0][0]*don[1][0]*don[0][1]**2/don[0][0]**4
    elif xn==2 and yn== 0:
        q=num[2][0]/don[0][0] - num[0][0]*don[2][0]/don[0][0]**2 - 2*don[1][0]*num[1][0]/don[0][0]**2 + 2*num[0][0]*don[1][0]**2/don[0][0]**3
    elif xn== 2 and yn== 1:
        q=num[2][1]/don[0][0] - num[0][0]*don[2][1]/don[0][0]**2 - 2*don[1][0]*num[1][1]/don[0][0]**2 - don[0][1]*num[2][0]/don[0][0]**2 - 2*num[1][0]*don[1][1]/don[0][0]**2 - num[0][1]*don[2][0]/don[0][0]**2 + 4*num[0][0]*don[1][0]*don[1][1]/don[0][0]**3 + 2*num[0][0]*don[0][1]*don[2][0]/don[0][0]**3 + 2*don[1][0]**2*num[0][1]/don[0][0]**3 + 4*don[1][0]*don[0][1]*num[1][0]/don[0][0]**3 - 6*num[0][0]*don[1][0]**2*don[0][1]/don[0][0]**4
    elif xn==3 and yn== 0:
        q=num[3][0]/don[0][0] - num[0][0]*don[3][0]/don[0][0]**2 - 3*don[1][0]*num[2][0]/don[0][0]**2 - 3*num[1][0]*don[2][0]/don[0][0]**2 + 6*num[0][0]*don[1][0]*don[2][0]/don[0][0]**3 + 6*don[1][0]**2*num[1][0]/don[0][0]**3 - 6*num[0][0]*don[1][0]**3/don[0][0]**4
    return q

def Am(xn,yn,Ld,Lm, Ad,g,nx,ny, N,param_derive=False,don=[]):
    S=[]
    k=3
    for i in range(4):
        j=0
        row=[]
        while j <= k:
            if i<=xn and j<=yn:
                row+=[quotient(i,j,Ld,Lm, Ad,g,nx,ny, N, param_derive=param_derive)]  
            j+=1
        S+=[row]
        k-=1
    
    if xn == 0 and yn == 0:
        s = Ld[0][0]*Lm[0][0]*S[0][0]
    elif xn == 0 and yn == 1:
     #   print "Ld[0][0],Ld[0][1],Lm[0][0],Lm[0][1],S[0][0],S[0][1] :",Ld[0][0],Ld[0][1],Lm[0][0],Lm[0][1],S[0][0],S[0][1]
        s = Ld[0][0]*Lm[0][0]*S[0][1] + Ld[0][0]*S[0][0]*Lm[0][1] + Lm[0][0]*S[0][0]*Ld[0][1]
    elif xn == 0 and yn == 2:
        s = Ld[0][0]*Lm[0][0]*S[0][2] + Ld[0][0]*S[0][0]*Lm[0][2] + 2*Ld[0][0]*Lm[0][1]*S[0][1] + Lm[0][0]*S[0][0]*Ld[0][2] + 2*Lm[0][0]*Ld[0][1]*S[0][1] + 2*S[0][0]*Ld[0][1]*Lm[0][1]
    elif xn == 0 and yn == 3:
        s = Ld[0][0]*Lm[0][0]*S[0][3] + Ld[0][0]*S[0][0]*Lm[0][3] + 3*Ld[0][0]*Lm[0][1]*S[0][2] + 3*Ld[0][0]*S[0][1]*Lm[0][2] + Lm[0][0]*S[0][0]*Ld[0][3] + 3*Lm[0][0]*Ld[0][1]*S[0][2] + 3*Lm[0][0]*S[0][1]*Ld[0][2] + 3*S[0][0]*Ld[0][1]*Lm[0][2] + 3*S[0][0]*Lm[0][1]*Ld[0][2] + 6*Ld[0][1]*Lm[0][1]*S[0][1]
    elif xn == 1 and yn == 0:
        s = Ld[0][0]*Lm[0][0]*S[1][0] + Ld[0][0]*S[0][0]*Lm[1][0] + Lm[0][0]*S[0][0]*Ld[1][0]
    elif xn == 1 and yn == 1:
        s = Ld[0][0]*Lm[0][0]*S[1][1] + Ld[0][0]*S[0][0]*Lm[1][1] + Ld[0][0]*Lm[1][0]*S[0][1] + Ld[0][0]*Lm[0][1]*S[1][0] + Lm[0][0]*S[0][0]*Ld[1][1] + Lm[0][0]*Ld[1][0]*S[0][1] + Lm[0][0]*Ld[0][1]*S[1][0] + S[0][0]*Ld[1][0]*Lm[0][1] + S[0][0]*Ld[0][1]*Lm[1][0]
    elif xn == 1 and yn == 2:
        s = Ld[0][0]*Lm[0][0]*S[1][2] + Ld[0][0]*S[0][0]*Lm[1][2] + Ld[0][0]*Lm[1][0]*S[0][2] + 2*Ld[0][0]*Lm[0][1]*S[1][1] + Ld[0][0]*S[1][0]*Lm[0][2] + 2*Ld[0][0]*S[0][1]*Lm[1][1] + Lm[0][0]*S[0][0]*Ld[1][2] + Lm[0][0]*Ld[1][0]*S[0][2] + 2*Lm[0][0]*Ld[0][1]*S[1][1] + Lm[0][0]*S[1][0]*Ld[0][2] + 2*Lm[0][0]*S[0][1]*Ld[1][1] + S[0][0]*Ld[1][0]*Lm[0][2] + 2*S[0][0]*Ld[0][1]*Lm[1][1] + S[0][0]*Lm[1][0]*Ld[0][2] + 2*S[0][0]*Lm[0][1]*Ld[1][1] + 2*Ld[1][0]*Lm[0][1]*S[0][1] + 2*Ld[0][1]*Lm[1][0]*S[0][1] + 2*Ld[0][1]*Lm[0][1]*S[1][0]
    elif xn == 2 and yn == 0:
        s = Ld[0][0]*Lm[0][0]*S[2][0] + Ld[0][0]*S[0][0]*Lm[2][0] + 2*Ld[0][0]*Lm[1][0]*S[1][0] + Lm[0][0]*S[0][0]*Ld[2][0] + 2*Lm[0][0]*Ld[1][0]*S[1][0] + 2*S[0][0]*Ld[1][0]*Lm[1][0]
    elif xn == 2 and yn == 1:
        s = Ld[0][0]*Lm[0][0]*S[2][1] + Ld[0][0]*S[0][0]*Lm[2][1] + 2*Ld[0][0]*Lm[1][0]*S[1][1] + Ld[0][0]*Lm[0][1]*S[2][0] + 2*Ld[0][0]*S[1][0]*Lm[1][1] + Ld[0][0]*S[0][1]*Lm[2][0] + Lm[0][0]*S[0][0]*Ld[2][1] + 2*Lm[0][0]*Ld[1][0]*S[1][1] + Lm[0][0]*Ld[0][1]*S[2][0] + 2*Lm[0][0]*S[1][0]*Ld[1][1] + Lm[0][0]*S[0][1]*Ld[2][0] + 2*S[0][0]*Ld[1][0]*Lm[1][1] + S[0][0]*Ld[0][1]*Lm[2][0] + 2*S[0][0]*Lm[1][0]*Ld[1][1] + S[0][0]*Lm[0][1]*Ld[2][0] + 2*Ld[1][0]*Lm[1][0]*S[0][1] + 2*Ld[1][0]*Lm[0][1]*S[1][0] + 2*Ld[0][1]*Lm[1][0]*S[1][0]
    elif xn == 3 and yn == 0:
        s = Ld[0][0]*Lm[0][0]*S[3][0] + Ld[0][0]*S[0][0]*Lm[3][0] + 3*Ld[0][0]*Lm[1][0]*S[2][0] + 3*Ld[0][0]*S[1][0]*Lm[2][0] + Lm[0][0]*S[0][0]*Ld[3][0] + 3*Lm[0][0]*Ld[1][0]*S[2][0] + 3*Lm[0][0]*S[1][0]*Ld[2][0] + 3*S[0][0]*Ld[1][0]*Lm[2][0] + 3*S[0][0]*Lm[1][0]*Ld[2][0] + 6*Ld[1][0]*Lm[1][0]*S[1][0]
    return s
